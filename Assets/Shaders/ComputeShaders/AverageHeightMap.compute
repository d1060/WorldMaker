// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

int mapWidth;
float blur = 0;
int blurStep;

RWStructuredBuffer<float> sourceHeightMap12;
RWStructuredBuffer<float> sourceHeightMap34;
RWStructuredBuffer<float> sourceHeightMap56;

RWStructuredBuffer<float> targetHeightMap12;
RWStructuredBuffer<float> targetHeightMap34;
RWStructuredBuffer<float> targetHeightMap56;

#include "Assets/Shaders/Cubemap.cginc"

float getSourceValueAtCoordinates(uint3 coordinates)
{
    uint index = coordinates.x + coordinates.y * mapWidth;

    if (coordinates.z == 1 || coordinates.z == 3 || coordinates.z == 5)
        index += mapWidth * mapWidth;

    if (coordinates.z <= 0) return sourceHeightMap12[index];
    else if (coordinates.z <= 1) return sourceHeightMap12[index];
    else if (coordinates.z <= 2) return sourceHeightMap34[index];
    else if (coordinates.z <= 3) return sourceHeightMap34[index];
    else if (coordinates.z <= 4) return sourceHeightMap56[index];
    else return sourceHeightMap56[index];
}

void setTargetValueAtCoordinates(uint3 coordinates, float value)
{
    uint index = coordinates.x + coordinates.y * mapWidth;

    if (coordinates.z == 1 || coordinates.z == 3 || coordinates.z == 5)
        index += mapWidth * mapWidth;

    if (coordinates.z <= 0) targetHeightMap12[index] = value;
    else if (coordinates.z <= 1) targetHeightMap12[index] = value;
    else if (coordinates.z <= 2) targetHeightMap34[index] = value;
    else if (coordinates.z <= 3) targetHeightMap34[index] = value;
    else if (coordinates.z <= 4) targetHeightMap56[index] = value;
    else targetHeightMap56[index] = value;
}

float diagonalHeight(uint3 coords, float thisHeight)
{
    float diagonalHeight = getSourceValueAtCoordinates(coords);
    float actualHeight = (diagonalHeight - thisHeight) / 1.41421356 + thisHeight;
    return actualHeight;
}

[numthreads(8,8,6)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)mapWidth || id.y >= (uint)mapWidth || id.z >= 6)
        return;

    uint3 cubemap = uint3(id.x, id.y, id.z);

    uint3 coordsL = getLeftCoordinates(cubemap, mapWidth);
    uint3 coordsR = getRightCoordinates(cubemap, mapWidth);
    uint3 coordsT = getTopCoordinates(cubemap, mapWidth);
    uint3 coordsB = getBottomCoordinates(cubemap, mapWidth);

    uint3 coordsTL = getTopLeftCoordinates(cubemap, mapWidth);
    uint3 coordsBR = getBottomRightCoordinates(cubemap, mapWidth);
    uint3 coordsTR = getTopRightCoordinates(cubemap, mapWidth);
    uint3 coordsBL = getBottomLeftCoordinates(cubemap, mapWidth);

    float height = getSourceValueAtCoordinates(cubemap);
    float heightD = getSourceValueAtCoordinates(coordsB);
    float heightR = getSourceValueAtCoordinates(coordsR);
    float heightU = getSourceValueAtCoordinates(coordsT);
    float heightL = getSourceValueAtCoordinates(coordsL);
    float heightDL = diagonalHeight(coordsBL, height);
    float heightDR = diagonalHeight(coordsBR, height);
    float heightUR = diagonalHeight(coordsTR, height);
    float heightUL = diagonalHeight(coordsTL, height);

    float squaredBlurStep = pow((2 * blurStep) + 1, 2);
    float squaredPrevBlurStep = pow((2 * (blurStep - 1)) + 1, 2);
    float minBlurWeight = 1.0 / squaredBlurStep;
    float maxBlurWeight = 1.0 / squaredPrevBlurStep;

    float blurWeight = 1 - (blur - floor(blur));

    blurWeight = blurWeight * (maxBlurWeight - minBlurWeight) + minBlurWeight;
    float othersBlurWeight = 1 - blurWeight;

    float numHeights = blurWeight;
    float totalHeight = height * blurWeight;

    float othersNumHeights = 0;
    float othersTotalHeight = 0;

    othersTotalHeight += heightUL + heightU + heightUR;
    othersNumHeights += 3;

    othersTotalHeight += heightL + heightR;
    othersNumHeights += 2;

    othersTotalHeight += heightDL + heightD + heightDR;
    othersNumHeights += 3;

    othersNumHeights *= othersBlurWeight;
    othersTotalHeight *= othersBlurWeight;

    totalHeight += othersTotalHeight;
    numHeights += othersNumHeights;

    float finalHeight = totalHeight / numHeights;

    setTargetValueAtCoordinates(cubemap, finalHeight);
}
