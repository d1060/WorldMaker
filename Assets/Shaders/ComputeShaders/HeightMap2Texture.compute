// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
int mapWidth;
float minHeight;
float maxHeight;
float erosionNoiseMerge;
int flowErosionSet;

float seed1;
float seed2;
float seed3;
float seed4;

int octaves;
float lacunarity;
float persistence;
float multiplier;
float xOffset;
float yOffset;
float zOffset;
int ridgedNoise;
float domainWarping;
float heightExponent;

StructuredBuffer<float> heightMap;
StructuredBuffer<float> flowErosionMap;

RWTexture2D<float4> result;
RWTexture2D<float4> noise;

#include "Assets/Shaders/Simplex.cginc"

float erodeHeight(int mapIndex, float height)
{
    float erodedHeight = flowErosionMap[mapIndex];
    if (erodedHeight <= 0)
        return height;

    float mergedHeight = height - erodedHeight * erosionNoiseMerge;

    if (mergedHeight <= 0)
        return 0;

    return mergedHeight;
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int mapIndex = id.x + (id.y * mapWidth * 4);

    float2 uv = float2((float)id.x / (4.0 * (float)mapWidth), (float)id.y / (2 * (float)mapWidth));

    float height = heightMap[mapIndex];
    height = erodeHeight(mapIndex, height);

    result[id.xy] = float4(height, height, height, 1);

    float3 offset = float3(xOffset, yOffset, zOffset);

    float height1 = sphereNoise(uv, offset, seed1, multiplier, octaves, lacunarity, persistence, ridgedNoise, domainWarping, minHeight, maxHeight);
    height1 = pow(abs(height1), heightExponent);

    float height2 = sphereNoise(uv, offset, seed2, multiplier, octaves, lacunarity, persistence, ridgedNoise, domainWarping, minHeight, maxHeight);
    height2 = pow(abs(height2), heightExponent);

    float height3 = sphereNoise(uv, offset, seed3, multiplier, octaves, lacunarity, persistence, ridgedNoise, domainWarping, minHeight, maxHeight);
    height3 = pow(abs(height3), heightExponent);

    float height4 = sphereNoise(uv, offset, seed4, multiplier, octaves, lacunarity, persistence, ridgedNoise, domainWarping, minHeight, maxHeight);
    height4 = pow(abs(height4), heightExponent);

    noise[id.xy] = float4(height1, height2, height3, height4);
}
