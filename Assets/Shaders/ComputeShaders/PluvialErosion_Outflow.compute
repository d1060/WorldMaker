// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

int mapWidth;
int mapHeight;
float waterScale = 0.01;
float waterFixedAmount = 0.01;
float gravity = 4;

RWStructuredBuffer<float> riverSourcesMap;
RWStructuredBuffer<float> humidityMap;
RWStructuredBuffer<float> heightMap;
RWStructuredBuffer<float4> outflowMap; // x == left, y == right, z == top, w = bottom
RWStructuredBuffer<float> waterHeightMap;

#include "Assets/Shaders/Cubemap.cginc"

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= 6 * (uint)mapWidth || id.y >= (uint)mapHeight)
        return;

    #include "Assets/Shaders/ComputeShaders/indexes.cginc"
   
    // Update water Height.
    float height = heightMap[index];
    float waterHeight = waterHeightMap[index];
    float d1 = waterScale;// *(humidityMap[index] + riverSourcesMap[index]) + waterFixedAmount + waterHeightMap[index];

    float outflowLeft = outflowMap[index].x + gravity * (height + waterHeight - heightMap[indexL] - waterHeightMap[indexL]);
    float outflowRight = outflowMap[index].y + gravity * (height + waterHeight - heightMap[indexR] - waterHeightMap[indexR]);
    float outflowTop = outflowMap[index].z + gravity * (height + waterHeight - heightMap[indexT] - waterHeightMap[indexT]);
    float outflowBottom = outflowMap[index].w + gravity * (height + waterHeight - heightMap[indexB] - waterHeightMap[indexB]);

    if (outflowLeft < 0) outflowLeft = 0;
    if (outflowRight < 0) outflowRight = 0;
    if (outflowTop < 0) outflowTop = 0;
    if (outflowBottom < 0) outflowBottom = 0;

    float totalOutflow = outflowLeft + outflowRight + outflowTop + outflowBottom;
    if (totalOutflow > d1)
    {
        float scalingFactor = d1 / totalOutflow;
        outflowLeft *= scalingFactor;
        outflowRight *= scalingFactor;
        outflowTop *= scalingFactor;
        outflowBottom *= scalingFactor;
    }

    float4 outflow = float4(outflowLeft, outflowRight, outflowTop, outflowBottom);
    outflowMap[index] = outflow;
    waterHeightMap[index] = d1;
}
