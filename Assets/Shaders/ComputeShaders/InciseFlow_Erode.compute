// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

int mapWidth;
float exponent = 2;
float heightFactor = 0.05;
float strength = 1;
float minAmount = 0;
float curveFactor = 1;
float heightInfluence = 1;
float waterLevel = 0.6;
float minimumHeight;
float maximumHeight;
float blur = 0;
float flowMapMaxValue = 1000000;
StructuredBuffer<float> heightMap;
StructuredBuffer<uint> flowMap;
RWStructuredBuffer<float> inciseFlowErosionMap;

#include "Assets/Shaders/Cubemap.cginc"

#define MIN_WATER_HEIGHT 0.0045

float getErodeValueFromFlowCoordinates(int index)
{
    uint flowValue = flowMap[index];

    float erodeValue = (flowValue / flowMapMaxValue);
    erodeValue = pow(abs(erodeValue), exponent);
    if (erodeValue < minAmount)
        erodeValue = 0;
    else
        erodeValue = (erodeValue - minAmount) / (1 - minAmount);

    if (erodeValue < 0)
        erodeValue = 0;

    erodeValue = pow(abs(erodeValue), curveFactor);

    erodeValue *= strength;
    return erodeValue;
}

[numthreads(16, 16, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)mapWidth * 4 || id.y >= (uint)mapWidth * 2)
        return;

    int index = id.x + id.y * mapWidth * 4;

    float height = heightMap[index];
    //if (height <= waterLevel)
    //    return;

    //if (exponent <= 1) exponent = 1.1;

    float erodeValue = getErodeValueFromFlowCoordinates(index);
    //float erodeCount = 1;

    if (blur > 0)
    {
        int blurSquareRadius = (int)ceil(blur);

        for (int blurRelativeX = -blurSquareRadius; blurRelativeX <= blurSquareRadius; blurRelativeX++)
        {
            for (int blurRelativeY = -blurSquareRadius; blurRelativeY <= blurSquareRadius; blurRelativeY++)
            {
                if (blurRelativeX == 0 && blurRelativeY == 0)
                    continue;

                float distance = sqrt(blurRelativeX * blurRelativeX + blurRelativeY * blurRelativeY);
                if (distance > blur) continue;

                uint2 erodeCoordinates = uint2(id.x + blurRelativeX, id.y + blurRelativeY);
                if (erodeCoordinates.x < 0) erodeCoordinates.x += mapWidth * 4;
                if (erodeCoordinates.x >= mapWidth * 4) erodeCoordinates.x -= mapWidth * 4;
                if (erodeCoordinates.y < 0) erodeCoordinates.x = 0;
                if (erodeCoordinates.y >= mapWidth * 2) erodeCoordinates.x = mapWidth * 2 - 1;

                uint erodeIndex = erodeCoordinates.x + erodeCoordinates.y * mapWidth * 4;

                float distanceRatio = 1 - distance / blur;

                float blurErodeValue = getErodeValueFromFlowCoordinates(erodeIndex);
                blurErodeValue *= distanceRatio;

                if (erodeValue < blurErodeValue) erodeValue = blurErodeValue;
            }
        }
    }

    if (erodeValue < 0) erodeValue = 0;
    //if (erodeValue > (height - waterLevel) * 0.99) erodeValue = (height - waterLevel) * 0.99;

    float maxErosionValueAtHeightInfluence1 = (height - waterLevel) * 0.99;
    float erosionValueAtHeightInfluence1 = erodeValue;
    if (erodeValue > maxErosionValueAtHeightInfluence1)
        erosionValueAtHeightInfluence1 = maxErosionValueAtHeightInfluence1;

    erodeValue = (erodeValue * (1 - heightInfluence)) + (erosionValueAtHeightInfluence1 * heightInfluence);

    inciseFlowErosionMap[index] = erodeValue;
}
