#pragma kernel CSMain

RWStructuredBuffer<float> heightMap1;
RWStructuredBuffer<float> heightMap2;
RWStructuredBuffer<float> heightMap3;
RWStructuredBuffer<float> heightMap4;
RWStructuredBuffer<float> heightMap5;
RWStructuredBuffer<float> heightMap6;
RWStructuredBuffer<float> minMax;

int _MapWidth;
float _MinimumHeight;
float _MaximumHeight;

float _Seed;
int _Octaves;
float _Lacunarity;
float _Persistence;
float _Multiplier;
float _xOffset;
float _yOffset;
float _zOffset;
int _RidgedNoise;
float _DomainWarping;
float _HeightExponent;
float _LayerStrength;

float _xOffset2;
float _yOffset2;
float _zOffset2;
float _Seed2;
float _Multiplier2;
int _Octaves2;
float _Lacunarity2;
float _Persistence2;
int _RidgedNoise2;
float _HeightExponent2;
float _LayerStrength2;
float _DomainWarping2;

#include "Assets/Shaders/Simplex.cginc"
#include "Assets/Shaders/Cubemap.cginc"

[numthreads(8, 8, 6)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)_MapWidth || id.y >= (uint)_MapWidth || id.z >= 6)
		return;

	float2 uv = cubemapXYZtoUV(id.x, id.y, id.z, _MapWidth);

	float3 offset = float3(_xOffset, _yOffset, _zOffset);
	float3 offset2 = float3(_xOffset2, _yOffset2, _zOffset2);

	//float height = sphereNoise(uv, offset, seed, multiplier, octaves, lacunarity, persistence, heightRange, ridgedNoise);
	float height = sphereHeight(uv, offset, _Seed, _Multiplier, _Octaves, _Lacunarity, _Persistence, _RidgedNoise, _HeightExponent, _LayerStrength, _DomainWarping,
		                            offset2, _Seed2, _Multiplier2, _Octaves2, _Lacunarity2, _Persistence2, _RidgedNoise2, _HeightExponent2, _LayerStrength2, _DomainWarping2,
		                            _MinimumHeight, _MaximumHeight);

	int mapIndex = id.x + (id.y * _MapWidth);

	if (id.z == 0) heightMap1[mapIndex] = height;
	else if (id.z == 1) heightMap2[mapIndex] = height;
	else if (id.z == 2) heightMap3[mapIndex] = height;
	else if (id.z == 3) heightMap4[mapIndex] = height;
	else if (id.z == 4) heightMap5[mapIndex] = height;
	else if (id.z == 5) heightMap6[mapIndex] = height;

	if (height < minMax[0]) minMax[0] = height;
	if (height > minMax[1]) minMax[1] = height;
}
