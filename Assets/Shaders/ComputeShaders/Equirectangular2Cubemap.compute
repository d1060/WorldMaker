// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

int mapWidth;
int mapHeight;
int cubemapDimension;
int subdivision;
int subDivisionX;
int subDivisionY;
int faceId;
Texture2D<float4> base;
SamplerState samplerbase;
RWTexture2D<float4> Result;

#define PI 3.14159274
#define Rad2Deg 57.29578

//float4 bilinear(float2 coord)
//{
//    int leftX = (int)floor(coord.x);
//    int rightX = (int)ceil(coord.x);
//    int bottomY = (int)floor(coord.y);
//    int topY = (int)ceil(coord.y);
//
//    float deltaX = coord.x - leftX;
//    float deltaY = coord.y - bottomY;
//
//    if (rightX >= mapWidth) rightX -= mapWidth;
//    if (rightX < 0) rightX += mapWidth;
//    if (leftX >= mapWidth) leftX -= mapWidth;
//    if (leftX < 0) leftX += mapWidth;
//    if (topY >= mapHeight) topY = mapHeight - 1;
//    if (topY < 0) topY = 0;
//    if (bottomY >= mapHeight) bottomY = mapHeight - 1;
//    if (bottomY < 0) bottomY = 0;
//
//    int2 indexBL = int2(leftX, bottomY);
//    int2 indexBR = int2(rightX, bottomY);
//    int2 indexTR = int2(rightX, topY);
//    int2 indexTL = int2(leftX, topY);
//
//    float4 valueBL = base[indexBL];
//    float4 valueBR = base[indexBR];
//    float4 valueTL = base[indexTL];
//    float4 valueTR = base[indexTR];
//
//    float4 valueXdelta0 = (valueBR - valueBL) * deltaX + valueBL;
//    float4 valueXdelta1 = (valueTR - valueTL) * deltaX + valueTL;
//
//    float4 value = (valueXdelta1 - valueXdelta0) * deltaY + valueXdelta0;
//    return value;
//}

float2 cartesianToPolarRatio(float3 cartesian)
{
    float2 polar;
    float xzAtan2 = 0;

    if (cartesian.x == 0)
    {
        if (cartesian.z > 0)
            xzAtan2 = PI / 2.0;
        else
            xzAtan2 = -PI / 2.0;
    }
    else
        xzAtan2 = atan2(cartesian.z, cartesian.x);

    polar.x = xzAtan2;

    polar.y = asin(cartesian.y);

    polar.x *= Rad2Deg;
    polar.y *= Rad2Deg;

    polar.x /= 360;
    polar.y /= 180;

    polar.x += 0.5;
    polar.y += 0.5;
    return polar;
}

float3 cubemapToCartesian(float2 cubeMap, int faceId)
{
    float x = 0;
    float y = 0;
    float z = 0;

    if (faceId == 0) // neg_x - Left - Z Starts from -dimension/2 to dimension/2
    {                // cubeMap.x is Z
        x = -1;
        z = 1 - 2 * cubeMap.x;
        y = 2 * cubeMap.y - 1;
    }
    else if (faceId == 1) // pos_z - Back
    {                     // cubeMap.x is X
        z = -1;
        x = 2 * cubeMap.x - 1;
        y = 2 * cubeMap.y - 1;
    }
    else if (faceId == 2) // pos_x - Right
    {                     // cubeMap.x is -Z
        x = 1;
        z = 2 * cubeMap.x - 1;
        y = 2 * cubeMap.y - 1;
    }
    else if (faceId == 3) // neg_z - Front
    {                     // cubeMap.x is -X
        z = 1;
        x = 1 - 2 * cubeMap.x;
        y = 2 * cubeMap.y - 1;
    }
    else if (faceId == 4) // pos_y - Top - Aligns with pos_z
    {                     // cubeMap.x is X, cubeMap.y is Z
        y = 1;
        x = 2 * cubeMap.x - 1;
        z = 2 * cubeMap.y - 1;
    }
    else if (faceId == 5) // neg_y - Bottom - Aligns with pos_z
    {                     // cubeMap.x is X, cubeMap.y is -Z
        y = -1;
        x = 2 * cubeMap.x - 1;
        z = 1 - 2 * cubeMap.y;
    }
    return float3(x, y, z);
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)cubemapDimension || id.y >= (uint)cubemapDimension)
        return;

    float2 cubeMapCoordinate = float2(id.x / (float)cubemapDimension, id.y / (float)cubemapDimension); // From 0 to 1.
    if (subdivision > 0)
    {
        float divisionPower = pow(2, subdivision);
        float pixelsPerDivision = cubemapDimension / divisionPower;
        if (subDivisionX >= 0 && subDivisionX < divisionPower)
        {
            float minX = pixelsPerDivision * (float)subDivisionX / (float)cubemapDimension;
            cubeMapCoordinate.x = minX + (cubeMapCoordinate.x * pixelsPerDivision) / cubemapDimension;
        }
        if (subDivisionY >= 0 && subDivisionY < divisionPower)
        {
            float minY = pixelsPerDivision * (divisionPower - (float)subDivisionY - 1.0) / (float)cubemapDimension;
            cubeMapCoordinate.y = minY + (cubeMapCoordinate.y * pixelsPerDivision) / cubemapDimension;
        }
    }
    float3 cartesian = cubemapToCartesian(cubeMapCoordinate, faceId);
    cartesian = normalize(cartesian);
    float2 polar = cartesianToPolarRatio(cartesian);
    // Shifts for the center meridian
    //polar.x -= 0.125;
    if (polar.x < 0)  polar.x += 1;
    if (polar.x >= 1) polar.x -= 1;

    //polar.x *= mapWidth;
    //polar.y *= mapHeight;

    float4 color = base.SampleLevel(samplerbase, polar, 0); // bilinear(polar);

    Result[id.xy] = color;
}
