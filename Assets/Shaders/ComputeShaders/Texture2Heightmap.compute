// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
int textureWidth;
Texture2D<float4> renderTexture;
SamplerState MyLinearMirrorSampler;
RWStructuredBuffer<float> heightMap;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)textureWidth * 4 || id.y >= (uint)textureWidth * 2)
        return;

    float2 uv = float2((float)id.x / (textureWidth * 4), (float)id.y / (textureWidth * 2));
    float4 rtColor = renderTexture.SampleLevel(MyLinearMirrorSampler, uv, 0);
    float height = (rtColor.x + rtColor.y + rtColor.z) / 3;

    int index = id.x + id.y * textureWidth * 4;

    heightMap[index] = height;
}
