// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

int mapWidth;
int mapHeight;
float minTiltAngle = 0.01;
float sedimentCapacity = 1;
float maxErosionDepth = 0.1;
float sedimentDissolvingConstant = 1;
float sedimentDepositionConstant = 1;
RWStructuredBuffer<float> sedimentMap;
RWStructuredBuffer<float> heightMap;
RWStructuredBuffer<float2> velocityMap;
RWStructuredBuffer<float> waterHeightMap;

#include "Assets/Shaders/ComputeShaders/interpolate.cginc"
#include "Assets/Shaders/Cubemap.cginc"

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= 6 * (uint)mapWidth || id.y >= (uint)mapHeight)
        return;

    #include "Assets/Shaders/ComputeShaders/indexes.cginc"

    float height = heightMap[index];
    float waterHeight = waterHeightMap[index];
    float velocity = sqrt(velocityMap[index].x * velocityMap[index].x + velocityMap[index].y * velocityMap[index].y);
    //if (velocity > 1)
    //{
    //    velocityMap[index].x /= velocity;
    //    velocityMap[index].y /= velocity;
    //    velocity = 1;
    //}
    float neighborHeight = interpolate(heightMap, float2(id.x + velocityMap[index].x, id.y + velocityMap[index].y));
    float heightDelta = height - neighborHeight; // If HeightDelta > 0, we are going DOWNHILL. If HeightDelta < 0, we are going UPHILL.

    if (heightDelta < minTiltAngle && heightDelta > -minTiltAngle)
    {
        if (heightDelta >= 0)
            heightDelta = minTiltAngle;
        else
            heightDelta = -minTiltAngle;
    }

    float sedimentTransportCapacity = sedimentCapacity * heightDelta * velocity;

    // Ramp-up function based on water depth
    float lMax = 0;
    if (waterHeight >= maxErosionDepth)
    {
        lMax = 1;
    }
    else if (waterHeight < maxErosionDepth && waterHeight > 0)
    {
        lMax = 1 - (maxErosionDepth - waterHeight) / maxErosionDepth;
    }
    sedimentTransportCapacity *= lMax;

    float currentSediment = sedimentMap[index];
    float newHeight = height;
    float sediment = currentSediment;
    float sedimentChange = 0;
    float newWaterHeight = waterHeight;

    // Deposits soil in ground.
    if (sedimentTransportCapacity < currentSediment || heightDelta < 0)
    {
        if (sedimentTransportCapacity < currentSediment)
            sedimentChange = sedimentDepositionConstant * (currentSediment - sedimentTransportCapacity);
        else 
            sedimentChange = sedimentDepositionConstant * (sedimentTransportCapacity - currentSediment);

        if (heightDelta >= 0 && sedimentChange > heightDelta)
            sedimentChange = heightDelta;
        else if (heightDelta < 0 && sedimentChange > -heightDelta)
            sedimentChange = -heightDelta;

        if (sedimentChange < 0)
            sedimentChange = 0;
        if (sedimentChange > currentSediment)
            sedimentChange = currentSediment;
        if (sedimentChange > waterHeight)
            sedimentChange = waterHeight;

        newHeight += sedimentChange;
        sediment -= sedimentChange;
        newWaterHeight -= sedimentChange;
    }
    // Dissolves soil in water.
    else if (sedimentTransportCapacity > currentSediment)
    {
        sedimentChange = sedimentDissolvingConstant * (sedimentTransportCapacity - currentSediment);
        if (sedimentChange > heightDelta)
            sedimentChange = heightDelta;
        if (height - sedimentChange < 0)
            sedimentChange = height;

        newHeight -= sedimentChange;
        sediment += sedimentChange;
        newWaterHeight += sedimentChange;
    }

    if (newHeight < 0) newHeight = 0;
    if (newHeight > 1) newHeight = 1;
    if (sediment < 0) sediment = 0;

    heightMap[index] = newHeight;
    sedimentMap[index] = sediment;
    waterHeightMap[index] = newWaterHeight;
}
